#!/usr/bin/env python3
import tensorflow.keras as keras
import csv
import random
import pickle

class Model:
	"""Class that implements the ML model.

	Instantiating the class with a file's path
	creates a Keras model. This model will be 
	used to generate the text for the webpage 
	comparison.

	Parameter
	---------
		model_file -> file path to a .h5 file 
					  containing a saved Keras model.
	"""

	def __init__(self, model_file=''):
		
		if model_file:
			self._model = keras.models.load_model(model_file)
		else:
			self._model = keras.models.load_model('/Users/schuylerjackson/text_generator/Saved_models/first_char_model.h5')
		#_trump_tweets = self._get_data()
		with open('data/model.data', 'rb') as file:
			self._model_data = pickle.load(file)


	
	def _get_data(self):
		"""Imports Trump tweets from csv file

		Returns:
			list of Trump tweets.
		"""
		tweets_lst = []
		path = '/Users/schuylerjackson/text_generator/Load_Tweets/data/original_tweets.csv'
		with open(path) as csvfile:
			reader = csv.reader(csvfile)
			for row in reader:
				tweets_lst.append(row[2])

		return tweets_lst

	def get_tweet(self):
		"""Gets a random tweet from _trump_tweets.
		
		Returns:
			Returns a random element from _trump_tweets
		"""
		index = random.randint(0, len(self._model_data['tweets_lst'])-1)
		return self._model_data['tweets_lst'][index]

	def get_fake(self):
		"""Gets a fake tweet made by the model.

		Returns:
			Returns a tweet generated by the _model.
		"""

		data = self._model_data
		char = data['char']
		maxlen = data['maxlen']
		char_to_index = data['char_to_index']
		index_to_char = data['index_to_char']

		return None


def make():
	mod = Model()
	return mod.get_tweet()

print(make())



